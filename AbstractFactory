#include<iostream>
using namespace std;

class obstacle {
public:
virtual void action()=0;
};

class Player
{
public:
virtual void interactWith(obstacle*)=0;
};

class kitty:public Player{
virtual void interactWith(obstacle* ob)=0;
cout << "Kitty has encountered a ";
ob->action();
}
};
 
class KungFuGuy: public Player {
virtual void interactWith(Obstacle* ob) {
cout << "KungFuGuy now battles against a ";
ob->action();
}
};

class Puzzle: public Obstacle {
public:
void action() { cout << "Puzzle" << endl; }
};
 
class NastyWeapon: public Obstacle {
public:
void action() { cout << "NastyWeapon" << endl; }
};


//Abstract Factory
class GameElementFactory {
public:
virtual Player* makePlayer() = 0;
virtual Obstacle* makeObstacle() = 0;
};

//Concrete Factory
// Concrete factories:
class KittiesAndPuzzles : public GameElementFactory {
public:
virtual Player* makePlayer() { return new Kitty; }
virtual Obstacle* makeObstacle() { return new Puzzle; }
};
 
class KillAndDismember : public GameElementFactory {
public:
virtual Player* makePlayer() { return new KungFuGuy; }
virtual Obstacle* makeObstacle() {
return new NastyWeapon;
}
};

class GameEnvironment {
GameElementFactory* gef;
Player* p;
Obstacle* ob;
public:
GameEnvironment(GameElementFactory* factory): gef(factory), 
p(factory->makePlayer()),ob(factory->makeObstacle()) {}
void play() { p->interactWith(ob); }
~GameEnvironment() {
delete p;
delete ob;
delete gef;
}
};

//Main Class
int main() {
GameEnvironment
g1(new KittiesAndPuzzles),
g2(new KillAndDismember);
g1.play();
g2.play();
}
/* Output:
Kitty has encountered a Puzzle
KungFuGuy now battles against a NastyWeapon */ ///:~
